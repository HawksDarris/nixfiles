#+TITLE: Literate NixOS Configuration
#+AUTHOR: Darris Hawks
#+STARTUP: overview
#+OPTIONS: toc:2
#+auto_tangle: t

* Table of Contents
:PROPERTIES:
:TOC: :include siblings :depth 2
:END:
:CONTENTS:
- [[#table-of-contents][Table of Contents]]
- [[#issues-to-address][Issues to Address]]
- [[#features-to-add][Features to Add]]
- [[#structural-changes-for-configuration][Structural Changes for Configuration]]
- [[#home-manager][Home Manager]]
  - [[#jurism][Jurism]]
  - [[#main-file-homenix][Main File: home.nix]]
  - [[#services][Services]]
  - [[#shell-scripts][Shell Scripts]]
- [[#nixos][NixOS]]
  - [[#main-file-configurationnix][Main File: configuration.nix]]
  - [[#also-important-hardware-configurationnix][Also Important: hardware-configuration.nix]]
- [[#secrets][Secrets]]
:END:

* TODO Features to Add
1. Set up wallpaper picker
2. Some way to change between themes
3. Add some candy to terminal launches. Maybe pacman chasing ghosts and a print of the color palette.
4. Espanso
5. Figure out how to use disko
   1. Set up impermanence (after all config files have been nixified)
   2. Set up LUKS
6. Figure out how to set up virt-manager entirely declaratively, with no imperative steps.

* TODO Structural Changes for Configuration
1. Use ~lib.mkOption~ and ~lib.mkDefault~
2. Use a ~default.nix~ file for all of the defaults so there can be fewer import statements in the ~home.nix~.
3. Move virtualmachines.nix from modules/nixos to modules/home-manager
* Home Manager
** Jurism
~lib.fakeSha256~ passes fake hash so build step will reveal real hash
:PROPERTIES:
:header-args: :comments link :tangle ~/nixfiles/builds/jurism.nix
:END:
#+BEGIN_SRC nix
  {
    pkgs ? import (fetchTarball {
      url = "https://jurism.xyz/jurism/dl?channel=release&platform=linux-x86_64";
      sha256 = lib.fakeSha256;
    }) {}
  }:
  pkgs.stdenv.mkDerivation rec {
    pname = "Jurism";
    version = "6.0";

    src = fetchurl {
      url = "https://jurism.xyz/jurism/dl?channel=release&platform=linux-x86_64";
      # rev = "069d2a5bfa4c4024063c25551d5201aeaf921cb3";
      sha256 = lib.fakeSha256;
    };


    buildPhase = ''
      tar vxjf Jurism-6.0.22m6_linux-x86_64.tar.bz2
    '';

    installPhase = ''
      mkdir -p $out/bin
      mv $out/bin
    '';
  }
#+END_SRC
** Main File: home.nix
:PROPERTIES:
:header-args: :comments link :tangle ~/nixfiles/hosts/default/home.nix
:END:
#+BEGIN_SRC nix
  { config, pkgs, lib, inputs, username, defaultEditor, allowed-unfree-packages, ... }:
  {
    nixpkgs.config = {
      allowUnfreePredicate = pkg: builtins.elem (lib.getName pkg) allowed-unfree-packages;
    };
#+END_SRC
You can also create simple shell scripts directly inside your configuration. For example, this adds a command 'my-hello' to your environment:

*** Imports
#+BEGIN_SRC nix
  imports = [

#+END_SRC

**** Jurism
#+BEGIN_SRC nix
  # ../../builds/jurism.nix
#+END_SRC
**** Tencent Meeting
#+BEGIN_SRC nix
  # ../../builds/tencent-meeting/default.nix
#+END_SRC
**** TODO Syncthing Changed; test
#+BEGIN_SRC nix
# ../../modules/home-manager/syncthing-package-definition.nix
#+END_SRC

**** Scripts and Files
#+BEGIN_SRC nix
../../modules/home-manager/scripts.nix
#+END_SRC

**** TODO Neomutt :issue:
Need to set this up with secrets
#+BEGIN_SRC nix
#../../modules/home-manager/neomutt.nix
#+END_SRC

**** Shell
#+BEGIN_SRC nix
../../modules/home-manager/nushell.nix
#+END_SRC
**** Editors
#+BEGIN_SRC nix
  ../../modules/home-manager/nixvim.nix
  ../../modules/home-manager/emacs.nix
#+END_SRC
***** TODO Editor Changes
- Set them to persist cursor location on close
- Set them to persist undo on close

**** CLI Utilities
#+BEGIN_SRC nix
../../modules/home-manager/bottom.nix
../../modules/home-manager/git.nix
#+END_SRC
**** Desktop
#+BEGIN_SRC nix
../../modules/home-manager/hyprland.nix
../../modules/home-manager/mako.nix
../../modules/home-manager/waybar.nix
../../modules/home-manager/wlogout.nix
#+END_SRC
***** Browsers :issue:
Separate the browsers into individual modules instead of having one module of all browsers.
#+BEGIN_SRC nix
../../modules/home-manager/browsers.nix
#+END_SRC
***** Terminal
#+BEGIN_SRC nix
../../modules/home-manager/kitty.nix
../../modules/home-manager/lf.nix
#+END_SRC
***** Nix Colors
#+BEGIN_SRC nix
inputs.nix-colors.homeManagerModules.default
../../modules/home-manager/colors.nix
#+END_SRC
***** Fonts
#+BEGIN_SRC nix
../../modules/home-manager/fonts.nix
#+END_SRC
**** Closing Bracket
#+BEGIN_SRC nix
];
#+END_SRC

*** Home Manager Variables
The ~username~ variable is declared in ~~/nixfiles/hosts/default/configuration.nix~
#+BEGIN_SRC nix
  home.username = "${username}";
  home.homeDirectory = "/home/${username}";
#+END_SRC

*** To Modularize :issue:
These need to be put in their own nix files to be imported, above in the import section.
**** fd
#+BEGIN_SRC nix
  programs.fd = {
    enable = true;
    hidden = true; # Pass --hidden flag by default
    ignores = [ # globally ignore given paths
      ".git/"
      "*.bak"
    ];
  };
#+END_SRC
**** thefuck
Type ~fuck~ after typing a command wrong to get suggestions for how to fix it.
#+BEGIN_SRC nix
  programs.thefuck = {
    enable = true;
    enableNushellIntegration = true;
  };
#+END_SRC
**** pandoc :issue:
Add ~.csl~ files for citation.
#+BEGIN_SRC nix
  programs.pandoc = {
    enable = true;
    citationStyles = [ # list of paths to .csl files
    ];
    defaults = {
      metadata = {
        revealjs-url = "..";
      };
      pdf-engine = "xelatex";
      citeproc = true; # Generates citations and bibliography from CSL
    };
  };
#+END_SRC

**** ripgrep
#+BEGIN_SRC nix
  programs.ripgrep = {
    enable = true;
    arguments = [
      "--max-columns-preview"
      "--colors=line:style:bold"
    ];
  };
#+END_SRC

**** dconf
#+BEGIN_SRC nix
  dconf.settings = {
    "org/virt-manager/virt-manager/connections" = {
      autoconnect = ["qemu:///system"];
      uris = ["qemu:///system"];
    };
  };
#+END_SRC

**** zathura
#+BEGIN_SRC nix
  programs.zathura = {
    enable = true;
    options = {
      recolor = "true";
      recolor-lightcolor = "#222222";
      recolor-keephue = "#222230";
      selection-clipboard = "clipboard";
      };
    };
#+END_SRC

*** Packages
lxqt-policykit-agent may be needed
#+BEGIN_SRC nix
  home.packages = with pkgs; [
#+END_SRC
**** Still to Sort
lxqt-policykit-agent may be necessary for virtio, etc.

Syncthing is not provided as a package for the syncthing service. I will do a pull request about it.

#+BEGIN_SRC nix
  brightnessctl
  bun
  calibre # Open port 8080 for server
  dart-sass
  dbus
  espanso-wayland
  eww
  glib
  gnucash
  hugo
  inkscape
  jq
  keepassxc
  kiwix
  libnotify
  onlyoffice-bin
  minetest
  ncdu
  plocate
  rofi-wayland
  slurp
  swappy
  swaylock
  swww
  taskwarrior3
  tun2socks # necessary for outline vpn; see tun2socksoutline script
  shadowsocks-libev
  wayshot
  wf-recorder
  wofi
  wofi-emoji
  wpsoffice
  wttrbar # weather
  xdotool # useful with wayland?
  yad # display GTK+ dialogs
#+END_SRC
**** Document Management
#+BEGIN_SRC nix
  texliveFull
  groff
  zotero # citations
#+END_SRC
**** Non-GUI Things
#+BEGIN_SRC nix
  bat
  bc
  exfat
  gh
  fdupes
  fzf
  jmtpfs
  killall
  kitty
  p7zip
  pamixer
  pciutils
  pdf2svg
  pylint
  python3Full
  rsync
  stylelint
  syncthing
  tldr
  transmission_4
  wl-clipboard
  wl-gammactl
#+END_SRC
**** Media :issue:
~mpc-cli~ and ~ncmpcpp~ are both music players. Probably don't need both. Music system not set up yet.

~playerctl~ controls MPRIS (D-Bus interface standard for controlling media players) media players. It should work for mpc-cli. Not sure if it will work for ncmpcpp.
#+BEGIN_SRC nix
  grimblast
  mpc-cli
  mpv
  ncmpcpp
  nsxiv
  playerctl
  vlc
#+END_SRC

**** Overrides
It is sometimes useful to fine-tune packages, for example, by applying overrides.

For example, this would install the Nerd Fonts package but with only the FantasqueSansMono font.
#+BEGIN_SRC nix
  # (pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })
#+END_SRC

**** Closing bracket
#+BEGIN_SRC nix
    ];
#+END_SRC

*** State Version
This value determines the Home Manager release that your configuration is compatible with.

This helps avoid breakage when a new Home Manager release introduces backwards incompatible changes.

You should not change this value, even if you update Home Manager.

If you do want to update the value, then make sure to first check the Home Manager release notes.
#+BEGIN_SRC nix
  home.stateVersion = "23.11";
#+END_SRC
*** Files Created by home.nix
#+BEGIN_SRC nix
  # home.file = { "/.config/espanso/configs/default.yml" =
  #   { text =
  #   ''

  #   '';
  #     executable = false;
  #   };
  #             };
#+END_SRC

*** Config Files Created by home.nix
use xdg.configFile for config files instead of home.file.
#+BEGIN_SRC nix
  xdg.configFile = {
    "./espanso/configs/default.yml" = {
      enable = true;
      target = "./espanso/configs/default.yml";
      text =
        ''
          '';
      executable = false;
      onChange = ""; # shell command to run when file has changed between generations
    };
  };
#+END_SRC

*** Session Variables :issue:
This does not seem to work for some reason.
It does work from within nushell.nix and see.
#+BEGIN_SRC nix
  home.sessionVariables = {
    EDITOR = "${defaultEditor}";
  };
#+END_SRC

*** Let Home Manager install and manage itself
#+BEGIN_SRC nix
  programs.home-manager.enable = true;
#+END_SRC

**** TODO Home-Manager
Medium priority: firefox creates search file that prevents home-manager rebuilds after being backed up until it is manually removed. Annoying.
*** Closing
#+BEGIN_SRC nix
  }
#+END_SRC
** Services
:PROPERTIES:
:header-args: :comments link :tangle ~/nixfiles/modules/home-manager/services.nix
:END:
#+BEGIN_SRC nix
  { ... }:
  {
#+END_SRC

**** Emacs
#+BEGIN_SRC nix
      services.emacs.client.enable = true;
#+END_SRC

**** Syncthing
#+BEGIN_SRC nix
  services.syncthing = {
    enable = true;
    extraOptions = [
      "--gui-user=${username}"
    ];
  };
#+END_SRC

**** Espanso
#+BEGIN_SRC nix
  services.espanso = {
    enable = true;
    configs = {
      default = {
      };
    };
    package = pkgs.espanso-wayland;
    wayland = true;
    matches = {
      matches = [
        {
          trigger = ":hello";
          replace = ''world'';
        }
      ];
      base = {
        matches = [
          {
            trigger = ":now";
            replace = "It's {{currentdate}} {{currenttime}}";
          }
        ];
      };
    };
  };
#+END_SRC

**** Shadowsocks
#+BEGIN_SRC nix
  systemd.user.services = {
    shadowsocks-proxy = {
      Unit = {
        Description = “Local Shadowsocks proxy”;
        After = “network.target”;
      };
      Install = {
        WantedBy = [ “default.target” ];
      };
      Service = {
        ExecStart = “${pkgs.shadowsocks-rust}/bin/sslocal -c ${config.home.homeDirectory}/shadowsocks.json”;
        ExecStop = “${pkgs.toybox}/bin/killall sslocal”;
      };
    };
  };
#+END_SRC

**** Closing
#+BEGIN_SRC nix
    }
#+END_SRC
** Shell Scripts
:PROPERTIES:
:header-args: :comments link :tangle ~/nixfiles/modules/home-manager/scripts.nix
:END:
#+BEGIN_SRC nix
  { pkgs, ... }:
  {
    home.packages = with pkgs; [
#+END_SRC
*** compiler script
#+BEGIN_SRC nix
(pkgs.writeShellScriptBin "compiler"
  ''
#!/bin/sh

file=$(readlink -f "$1")
dir=''${file%/*}
base="''${file%.*}"
ext="''${file##*.}"

cd "$dir" || exit 1

textype() { \
textarget="$(getcomproot "$file" || echo "$file")"
echo "$textarget"
command="pdflatex"
( head -n5 "$textarget" | grep -qi 'xelatex' ) && command="xelatex"
$command --output-directory="''${textarget%/*}" "''${textarget%.*}"
grep -qi addbibresource "$textarget" &&
biber --input-directory "''${textarget%/*}" "''${textarget%.*}" &&
$command --output-directory="''${textarget%/*}" "''${textarget%.*}" &&
$command --output-directory="''${textarget%/*}" "''${textarget%.*}"
}

case "$ext" in
        # Try to keep these cases in alphabetical order.
        [0-9]) preconv "$file" | refer -S -e | groff -mandoc -T pdf > "$base".pdf ;;
        c) cc "$file" -o "$base" && "$base" ;;
        cpp) g++ "$file" -o "$base" && "$base" ;;
        cs) mcs "$file" && mono "$base".exe ;;
        go) go run "$file" ;;
        h) sudo make install ;;
        java) javac -d classes "$file" && java -cp classes "''${1%.*}" ;;
        m) octave "$file" ;;
        md)	if  [ -x "$(command -v lowdown)" ]; then
        lowdown --parse-no-intraemph "$file" -Tms | groff -mpdfmark -ms -kept -T pdf > "$base".pdf
        elif [ -x "$(command -v groffdown)" ]; then
        groffdown -i "$file" | groff -T pdf > "$base".pdf
        else
        pandoc -t ms --highlight-style=kate -s -o "$base".pdf "$file"
        fi ; ;;
        mom) preconv "$file" | refer -S -e | groff -mom -kept -T pdf > "$base".pdf ;;
        ms) preconv "$file" | refer -S -e | groff -me -ms -kept -T pdf > "$base".pdf ;;
        org) emacs "$file" --batch -u "$USER" -f org-latex-export-to-pdf ;;
        py) python "$file" ;;
        [rR]md) Rscript -e "rmarkdown::render('$file', quiet=TRUE)" ;;
        rs) cargo build ;;
        sass) sassc -a "$file" "$base".css ;;
        scad) openscad -o "$base".stl "$file" ;;
        sent) setsid -f sent "$file" 2>/dev/null ;;
        tex) textype "$file" ;;
        typ) typst compile "$file" ;;
        ,*) sed -n '/^#!/s/^#!//p; q' "$file" | xargs -r -I % "$file" ;;
        esac
        '')
#+END_SRC
*** Closing
#+BEGIN_SRC nix
  ];
}
#+END_SRC
* NixOS
From scratch set up:
1. ~sudo nixos-rebuild switch --flake .#default~ from directory with ~flake.nix~
2. ~home-manager switch --flake .#sour~ from directory with ~flake.nix~
** Main File: configuration.nix
:PROPERTIES:
:header-args: :comments link :tangle ~/nixfiles/hosts/default/configuration.nix
:END:
Need to do flake equivalent of ~nix-channel --add https://mirrors.tuna.tsinghua.edu.cn/nix-channels/nixpkgs-unstable~
#+BEGIN_SRC nix
  { config, pkgs, inputs, ... }:

  {

#+END_SRC
**** Imports
#+BEGIN_SRC nix
  imports =
    [
      ./hardware-configuration.nix
      ./../../modules/nixos/locale.nix
      ../../modules/nixos/overrides.nix
      ../../modules/nixos/virtualmachines.nix
      ../../modules/main-user.nix
      #<home-manager/nixos>
    ];
#+END_SRC
**** User Set-up
#+BEGIN_SRC nix
  main-user.enable = true;
  main-user.userName = "sour";
  users.defaultUserShell = pkgs.nushell;
#+END_SRC
**** Flake Set-up
#+BEGIN_SRC nix
    nix.settings.experimental-features = [ "nix-command" "flakes" ];
#+END_SRC
**** Hyprland
[[https://wiki.hyprland.org/Nix/Hyprland-on-Home-Manager/][This is required for home-manager to set up hyprland properly]]
#+BEGIN_SRC nix
  programs.hyprland.enable = true;

#+END_SRC
**** Networking

***** TODO Opening
Low priority: use variable for hostname.
#+BEGIN_SRC nix
  networking = {
    hostName = "nixos";
    # hostName = "${hostname}";
    networkmanager.enable = true;
#+END_SRC

******* Firewall
#+BEGIN_SRC nix
  firewall.allowedTCPPorts = [
    8080
    22
    43741
  ];
  firewall.allowedUDPPorts = [
    22
    43741
  ];
#+END_SRC
******* Proxy
#+BEGIN_SRC nix
  # Configure network proxy if necessary
  # proxy.default = "http://user:password@proxy:port/";
  # proxy.noProxy = "127.0.0.1,localhost,internal.domain";
#+END_SRC
***** Closing
#+BEGIN_SRC nix
  };
#+END_SRC
**** TODO XDG Portal
This may be handleable by home-manager.
#+BEGIN_SRC nix
  xdg.portal = {
          enable = true;
          configPackages = with pkgs; [
                  xdg-desktop-portal-gtk
          ];
          extraPortals = with pkgs; [
            xdg-desktop-portal-gtk
          ];
    };
#+END_SRC
**** Bootloader
#+BEGIN_SRC nix
    boot.loader.systemd-boot.enable = true;
    boot.loader.efi.canTouchEfiVariables = true;
    boot.supportedFilesystems = [ "ntfs" ];

  #   boot.kernel.sysctl = {
  #     "net.ipv6.conf.all.disable_ipv6" = 1;
  # ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpMV2tCUGx4MTR6SDNLMU9oeVk4S1JB@104.168.61.82:43741
  #     "net.ipv6.conf.default.disable_ipv6" = 1;
  #     "net.ipv4.tcp_timestamps" = 0;
  #} ;
#+END_SRC
**** Services
#+BEGIN_SRC nix
  services = {
    flatpak.enable = true;
    printing.enable = true;
    pipewire = {
      enable = true;
      alsa.enable = true;
      alsa.support32Bit = true;
      pulse.enable = true;
      # If you want to use JACK applications, uncomment this
      #jack.enable = true;

      # use the example session manager (no others are packaged yet so this is enabled by default,
      # no need to redefine it in your config for now)
      #media-session.enable = true;
    };
    # blueman.enable = true;
    # Enable the OpenSSH daemon.
    openssh.enable = true;
    gvfs.enable = true;
    devmon.enable = true;
    udisks2.enable = true;
    upower.enable = true;
    power-profiles-daemon.enable = true;
    gnome = {
      glib-networking.enable = true; # TODO probably delete
    };
    mpd = {
      enable = true;
      musicDirectory = "/home/sour/Music"; # TODO make this a variable
      extraConfig = ''
                # must specify one or more outputs in order to play audio
                # e.g., PipeWire
                audio_output {
                  type "pipewire"
                  name "My PipeWire Output"
                }
              '';
      user = "sour"; # TODO make this a variable

      startWhenNeeded = true;
    };
  };
  #  services.mpd = {
  #    XDG_RUNTIME_DIR = "/run/user/${toString config.users.users.sour.uid}";
  #  };
  # displayManager = {
  # 	sddm = {
  # 	  enable = true;
  # 	  wayland = {
  # 	    enable = true;
  # 	    compositor = "weston";
  # 	  };
  # 	};
  # };
#+END_SRC
**** Sound
#+BEGIN_SRC nix
    # sound.enable = true;
    hardware = {
      pulseaudio.enable = false;
      bluetooth = {
        enable = true;
        powerOnBoot = true;
        settings = {
          General = {
            ControllerMode = "dual";
            AlwaysPairable = "false";
            DiscoverableTimeout = "180";
          };
          GATT = {
            Cache = "always";
          };
          Policy = {
            AutoEnable = "true";
          };
        };
      };
    };
#+END_SRC
**** System Packages
To search, ~$ nix search wget~
#+BEGIN_SRC nix
  environment.systemPackages = with pkgs; [
    kitty
    # nur.repos.linyinfeng.wemeet
  ];
#+END_SRC

#+BEGIN_SRC nix
fonts.enableGhostscriptFonts = true;
#+END_SRC
**** Programs
Some programs need SUID wrappers, can be configured further or are started in user sessions.
#+BEGIN_SRC nix
  programs = {
    neovim.enable = true;
    nano.enable = false;
    appimage = {
      enable = true;
      binfmt = true;
    };
    virt-manager.enable = true;
  };
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };
#+END_SRC
**** Security
#+BEGIN_SRC nix
  security = {
    polkit.enable = true;
    pam.services.swaylock = {};
    rtkit.enable = true;
  };
#+END_SRC
**** System
Do not change stateVersion.
#+BEGIN_SRC nix
  system = {
    autoUpgrade.enable  = true;
    stateVersion = "23.11";
  };
#+END_SRC

*** Closing
#+BEGIN_SRC nix
}
#+END_SRC
*** Virtual Machine Configuration
:PROPERTIES:
:header-args: :comments link :tangle ~/nixfiles/modules/nixos/virtualmachines.nix
:END:
#+BEGIN_SRC nix
  {config, pkgs, username, ... }:

  {
    programs.dconf.enable = true;

    users.users.${username}.extraGroups = [ "libvirtd" ];

    programs.virt-manager.enable = true;

    environment.systemPackages = with pkgs; [
      virt-viewer
      spice
      spice-gtk
      spice-protocol
      win-virtio
      win-spice
      adwaita-icon-theme
    ];

    virtualisation = {
      libvirtd = {
        enable = true;
        qemu = {
          swtpm.enable = true;
          ovmf.enable = true;
          ovmf.packages = [ pkgs.OVMFFull.fd ];
        };
      };
      spiceUSBRedirection.enable = true;
    };
    services.spice-vdagentd.enable = true;
  }
#+END_SRC
See dconf settings in home-manager.

** Also Important: hardware-configuration.nix
:PROPERTIES:
:header-args: :comments link :tangle ~/nixfiles/hosts/default/hardware-configuration.nix
:END:
#+BEGIN_SRC nix
  { config, lib, pkgs, modulesPath, ... }:

  {
    imports =
      [ (modulesPath + "/installer/scan/not-detected.nix")
      ];

    boot.initrd.availableKernelModules = [ "xhci_pci" "thunderbolt" "nvme" "usb_storage" "sd_mod" ];
    boot.initrd.kernelModules = [ ];
    boot.kernelModules = [ "kvm-intel" ];
    boot.extraModulePackages = [ ];

    fileSystems."/" =
      { device = "/dev/disk/by-uuid/e6a22d0b-0c4f-4b3c-92c2-f56bab77b37d";
        fsType = "ext4";
      };

    fileSystems."/boot" =
      { device = "/dev/disk/by-uuid/53DC-FF2D";
        fsType = "vfat";
        options = [ "fmask=0022" "dmask=0022" ];
      };

    swapDevices =
      [ { device = "/dev/disk/by-uuid/c32b4036-c9ae-4f26-819d-7c4e1689ed2d"; }
      ];

    # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
    # (the default) this is the recommended approach. When using systemd-networkd it's
    # still possible to use this option, but it's recommended to use it in conjunction
    # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
    networking.useDHCP = lib.mkDefault true;
    # networking.interfaces.wlp166s0.useDHCP = lib.mkDefault true;

    nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
    hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  }
#+END_SRC
* TODO Secrets :issue:
Need to learn how to do secrets. Maybe keep them here.
#+BEGIN_SRC nix

#+END_SRC

* Setup                                                     :noexport:
# Local variables:
# after-save-hook: org-babel-tangle
# end:
